#cloud-config

manage_etc_hosts: localhost
role: workers
coreos:
  update:
    reboot-strategy: off
  locksmith:
    endpoint: "http://127.0.0.1:2379"
  fleet:
    metadata: "role=worker,region=fra1"
    etcd_servers: "http://127.0.0.1:2379"
  units:
    - name: calico-node.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Calico node for network policy
        Requires=network-online.target,etcd2.service
        After=network-online.target

        [Service]
        Slice=machine.slice
        KillMode=mixed
        Restart=always
        TimeoutStartSec=0
        Environment=CALICO_DISABLE_FILE_LOGGING=true
        Environment=HOSTNAME=$public_ipv4
        Environment=IP=$public_ipv4
        Environment=FELIX_FELIXHOSTNAME=$public_ipv4
        Environment=CALICO_NETWORKING=false
        Environment=NO_DEFAULT_POOLS=true
        Environment=ETCD_ENDPOINTS=http://127.0.0.1:2379
        ExecStart=/usr/bin/rkt run \
          --inherit-env \
          --stage1-from-dir=stage1-fly.aci \
          --volume=modules,kind=host,source=/lib/modules,readOnly=false \
          --mount=volume=modules,target=/lib/modules \
          --trust-keys-from-https quay.io/calico/node:v0.20.0

        [Install]
        WantedBy=multi-user.target
    - name: docker.service
      command: start
      enable: true
      drop-ins:
        - name: 60-wait-for-flannel-config.conf
          content: |
            [Unit]
            After=flanneld.service
            Requires=flanneld.service
            Restart=always
    - name: etcd2.service
      command: start
      enable: true
      drop-ins:
      - name: 20-cloudinit.conf
        content: |
          [Service]
          Environment="ETCD_NAME=%H"
          Environment="ETCD_PROXY=on"
          Environment="ETCD_INITIAL_CLUSTER=infra1=http://{{ .Kube.MasterPrivateIP }}:2380"
          Environment="ETCD_LISTEN_CLIENT_URLS=http://127.0.0.1:2379"
    - name: flanneld.service
      command: start
      enable: true
    - name: kubelet.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes

        [Service]
        Restart=always
        RestartSec=10
        TimeoutSec=300
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        EnvironmentFile=/etc/environment
        Environment="RKT_RUN_ARGS=--volume var-log,kind=host,source=/var/log --mount volume=var-log,target=/var/log"
        Environment=KUBELET_IMAGE_URL={{ .Kube.DigitalOceanConfig.HyperkubeImageURL }}
        Environment=KUBELET_IMAGE_TAG={{ .Kube.DigitalOceanConfig.HyperkubeImageTag }}
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/opt/bin/download-k8s-binary
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://{{ .Kube.MasterPrivateIP }} \
          --network-plugin-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=cni \
          --allow-privileged=true \
          --register-schedulable=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster_dns=10.3.0.10 \
          --cluster_domain=cluster.local \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig \
          --v=2

        [Install]
        WantedBy=multi-user.target
    - name: setup-network-environment.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/1.0.1/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: sshd.socket
      command: restart
      runtime: true
      content: |
        [Socket]
        ListenStream=22022
        FreeBind=true
        Accept=yes
write_files:
  - path: /opt/bin/download-k8s-binary
    permissions: 0755
    content: |
      #!/bin/bash
      cd /tmp
      wget https://github.com/digitalocean/doctl/releases/download/v1.4.0/doctl-1.4.0-linux-amd64.tar.gz
      tar xf /tmp/doctl-1.4.0-linux-amd64.tar.gz
      sudo mv /tmp/doctl /opt/bin/
  - path: /run/systemd/system/etcd.service.d/30-certificates.conf
    permissions: 0644
    content: |
      [Service]
      Environment=ETCD_CA_FILE=/etc/ssl/etcd/certs/ca.pem
      Environment=ETCD_CERT_FILE=/etc/ssl/etcd/certs/etcd.pem
      Environment=ETCD_KEY_FILE=/etc/ssl/etcd/private/etcd.pem
      Environment=ETCD_PEER_CA_FILE=/etc/ssl/etcd/certs/ca.pem
      Environment=ETCD_PEER_CERT_FILE=/etc/ssl/etcd/certs/etcd.pem
      Environment=ETCD_PEER_KEY_FILE=/etc/ssl/etcd/private/etcd.pem
  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    permissions: 0644
    content: |
      {
          "name": "calico",
          "type": "flannel",
          "delegate": {
              "type": "calico",
              "etcd_endpoints": "http://127.0.0.1:2379",
              "log_level": "none",
              "log_level_stderr": "info",
              "hostname": "$public_ipv4",
              "policy": {
                  "type": "k8s",
                  "k8s_api_root": "https://{{ .Kube.MasterPrivateIP }}:443",
                  "k8s_auth_token": "{{ .Kube.Password }}"
              },
              "kubernetes": {
                  "kubeconfig": "/etc/kubernetes/worker-kubeconfig"
              }
          }
      }
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    permissions: 0644
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: {{ .Kube.DigitalOceanConfig.HyperkubeImageURL }}:{{ .Kube.DigitalOceanConfig.HyperkubeImageTag }}
          command:
          - /hyperkube
          - proxy
          - --master=https://{{ .Kube.MasterPrivateIP }}
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig
          - --proxy-mode=iptables
          - --v=2
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            - mountPath: /etc/kubernetes/worker-kubeconfig
              name: kubeconfig
              readOnly: true
            - mountPath: /etc/kubernetes/ssl
              name: etc-kube-ssl
              readOnly: true
        volumes:
          - name: ssl-certs
            hostPath:
              path: /usr/share/ca-certificates
          - name: kubeconfig
            hostPath:
              path: "/etc/kubernetes/worker-kubeconfig"
          - name: etc-kube-ssl
            hostPath:
              path: "/etc/kubernetes/ssl"
  - path: /etc/kubernetes/worker-kubeconfig
    permissions: 0644
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          server: https://{{ .Kube.MasterPrivateIP }}
          insecure-skip-tls-verify: true
      users:
      - name: kubelet
        user:
          token: {{ .Kube.Password }}
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context
